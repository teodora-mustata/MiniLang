//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Teodora/Desktop/MiniLang/MiniLang/MiniLang/MiniLang/MiniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniLangParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IMiniLangVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] MiniLangParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.structDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructDecl([NotNull] MiniLangParser.StructDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.constructorDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructorDecl([NotNull] MiniLangParser.ConstructorDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.destructorDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDestructorDecl([NotNull] MiniLangParser.DestructorDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.methodDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMethodDecl([NotNull] MiniLangParser.MethodDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.structBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructBody([NotNull] MiniLangParser.StructBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.varDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDecl([NotNull] MiniLangParser.VarDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDecl([NotNull] MiniLangParser.FunctionDeclContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamList([NotNull] MiniLangParser.ParamListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam([NotNull] MiniLangParser.ParamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.constructorCallStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructorCallStatement([NotNull] MiniLangParser.ConstructorCallStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MiniLangParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.blockStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStatement([NotNull] MiniLangParser.BlockStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] MiniLangParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] MiniLangParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] MiniLangParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] MiniLangParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpression([NotNull] MiniLangParser.RelationalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] MiniLangParser.LogicalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PrimaryExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExpression([NotNull] MiniLangParser.PrimaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentExpression([NotNull] MiniLangParser.AssignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IncrementDecrementExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrementDecrementExpression([NotNull] MiniLangParser.IncrementDecrementExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpression([NotNull] MiniLangParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpression([NotNull] MiniLangParser.ParenExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionCallExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] MiniLangParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberExpression([NotNull] MiniLangParser.NumberExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringExpression([NotNull] MiniLangParser.StringExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstructorCallExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructorCallExpression([NotNull] MiniLangParser.ConstructorCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MethodCallExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMethodCallExpression([NotNull] MiniLangParser.MethodCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FieldAccessExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldAccessExpression([NotNull] MiniLangParser.FieldAccessExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="MiniLangParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] MiniLangParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] MiniLangParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.constructorCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructorCall([NotNull] MiniLangParser.ConstructorCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] MiniLangParser.ExpressionListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniLangParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] MiniLangParser.TypeContext context);
}
